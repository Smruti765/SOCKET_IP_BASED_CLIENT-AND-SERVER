SERVER 
using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace server
{
    public partial class Form1 : Form
    {
        private TcpListener listener;
        private readonly List<TcpClient> clients = new List<TcpClient>();
        private bool serverRunning = false;

        public Form1()
        {
            InitializeComponent();
            this.Text = "🔌 Socket Chat Server";
        }

        private void btnStart_Click(object sender, EventArgs e)
        {
            try
            {
                listener = new TcpListener(IPAddress.Any, 5000);
                listener.Start();
                serverRunning = true;
                LogServer("✅ Server started on port 5000...");

                Task.Run(() => AcceptClients());

                btnStart.Enabled = false;
                btnStop.Enabled = true;
                btnSendServer.Enabled = true;
            }
            catch (Exception ex)
            {
                LogServer("❌ Error starting server: " + ex.Message);
            }
        }

        private void btnStop_Click(object sender, EventArgs e)
        {
            try
            {
                serverRunning = false;
                listener?.Stop();

                foreach (var client in clients)
                {
                    client?.Close();
                }

                clients.Clear();
                LogServer("🛑 Server stopped.");
                btnStart.Enabled = true;
                btnStop.Enabled = false;
                btnSendServer.Enabled = false;
            }
            catch (Exception ex)
            {
                LogServer("❌ Error stopping server: " + ex.Message);
            }
        }

        private void AcceptClients()
        {
            while (serverRunning)
            {
                try
                {
                    TcpClient client = listener.AcceptTcpClient();
                    clients.Add(client);
                    LogServer("🔗 Client connected: " + client.Client.RemoteEndPoint);
                    Task.Run(() => ReceiveFromClient(client));
                }
                catch (Exception ex)
                {
                    if (serverRunning)
                        LogServer("⚠️ Error accepting client: " + ex.Message);
                }
            }
        }

        private void ReceiveFromClient(TcpClient client)
        {
            NetworkStream stream = client.GetStream();
            byte[] buffer = new byte[1024];
            int byteCount;

            try
            {
                while ((byteCount = stream.Read(buffer, 0, buffer.Length)) > 0)
                {
                    string msg = Encoding.UTF8.GetString(buffer, 0, byteCount);
                    LogServer("📩 " + msg);

                    foreach (var c in clients)
                    {
                        try
                        {
                            c.GetStream().Write(buffer, 0, byteCount);
                        }
                        catch
                        {
                            LogServer("⚠️ Failed to send to a client.");
                        }
                    }
                }
            }
            catch
            {
                LogServer("⚠️ Client communication error.");
            }
            finally
            {
                clients.Remove(client);
                client.Close();
                LogServer("❌ Client disconnected.");
            }
        }

        private void btnSendServer_Click(object sender, EventArgs e)
        {
            string msg = txtServerMessage.Text.Trim();
            if (string.IsNullOrEmpty(msg)) return;

            string fullMsg = "Server: " + msg;
            byte[] buffer = Encoding.UTF8.GetBytes(fullMsg);

            foreach (var c in clients)
            {
                try
                {
                    c.GetStream().Write(buffer, 0, buffer.Length);
                }
                catch
                {
                    LogServer("⚠️ Failed to send to a client.");
                }
            }

            LogServer("🟢 You (Server): " + msg);
            txtServerMessage.Clear();
        }

        private void LogServer(string message)
        {
            if (InvokeRequired)
            {
                Invoke(new Action(() =>
                    txtServerLog.AppendText($"{DateTime.Now:HH:mm:ss} ➤ {message}{Environment.NewLine}")
                ));
            }
            else
            {
                txtServerLog.AppendText($"{DateTime.Now:HH:mm:ss} ➤ {message}{Environment.NewLine}");
            }
        }

        // Optional placeholders to prevent errors
        private void txtServerLog_TextChanged(object sender, EventArgs e) { }
        private void txtServerMessage_TextChanged(object sender, EventArgs e) { }
        private void title_Click(object sender, EventArgs e) { }
        private void normal_Click(object sender, EventArgs e) { }
        private void label1_Click(object sender, EventArgs e) { }
    }
}
